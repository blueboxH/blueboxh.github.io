<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[解决mybatis中resultMap使用association和collection错误去重的问题]]></title>
    <url>%2F2018-10-09-Solve-the-problem-of-using-the-association-i-the-resultMap-of-mybatis%2F</url>
    <content type="text"><![CDATA[问题描述: 在使用mybatis查询数据的时候, 由于没有正确的使用resultMap, 导致sql语句查询的总条数比展示出来的数据条数要多. 表现出来就是使一些数据丢死了. 由于没有任何有用的日志打印出来, 用了半天才定位到是resultMap错误去重导致的问题. 原来的resultMap是这样的(与关键点无关的代码就不放出来了): 123456&lt;resultMap id="MajorNodeBindDetailsResultMap" type="com.thgy.udevforums.business.majorNode.Model.MajorNodeBindDetailsVo"&gt; &lt;result column="status" jdbcType="INTEGER" property="status" /&gt; &lt;association property="majorNodeBindVo" resultMap="MajorNodeBindResultMap" /&gt; &lt;association property="authenticationVo" resultMap="AuthenticationResultMap" /&gt; &lt;association property="majorNodeApplyVo" resultMap="MajorNodeApplyResultMap" /&gt;&lt;/resultMap&gt; 由于正好association之外只有一个status字段, 且这个字段重复率极高, 才轻易发现了这个bug, 尽管几个VO里面的数据不一样, 但是检查数据是否重复的时候并没有把里面的数据作为判断依据, 导致数据丢失. 找了好多错误方向之后终于看到了这篇文章, 虽然觉得这种解决方法并不完美, 因为我3个vo的map里面的字段都一个个拿出来会死人的~_~, 但是终于还是从标题找到了一个关键点association“错误”去除重复数据 , 就再也不用漫无目的的去找答案了. 所以我去找了resultMap中association的使用方法, 在https://blog.csdn.net/ilovejava_2010/article/details/8180521中看到了以下关键信息, 加上id元素作为resultMap的唯一标识: 重点提示:*id*元素在嵌套结果映射中扮演了非常重要的角色，您应该总是指定一个或多个属性来唯一标识这个结果集。事实上，如果您没有那样做，MyBatis也会工作，但是会导致严重性能开销。选择尽量少的属性来唯一标识结果，而使用主键是最明显的选择（即使是复合主键）。 修改之后的resultMap是这样的: 1234567&lt;resultMap id="MajorNodeBindDetailsResultMap" type="com.thgy.udevforums.business.majorNode.Model.MajorNodeBindDetailsVo"&gt; &lt;id column="user_id" property="userId"/&gt; &lt;result column="status" jdbcType="INTEGER" property="status" /&gt; &lt;association property="majorNodeBindVo" resultMap="MajorNodeBindResultMap" /&gt; &lt;association property="authenticationVo" resultMap="AuthenticationResultMap" /&gt; &lt;association property="majorNodeApplyVo" resultMap="MajorNodeApplyResultMap" /&gt;&lt;/resultMap&gt; 至此, 完美解决这个困扰了半天无头绪的bug, 当然, 也要顺手给VO中的resultMap加上id元素.]]></content>
      <tags>
        <tag>mybatis</tag>
        <tag>association</tag>
        <tag>resultMap</tag>
        <tag>错误去重</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gradle学习笔记]]></title>
    <url>%2F2018-09-27-gradle-notes%2F</url>
    <content type="text"><![CDATA[maven 和 gradle 作为java的项目构建工具, 两者各有优缺点, 就我个人感觉而言, 觉得maven这种xml格式的上手比较容易, 新手看几条命令也能很容易的理解要表达的意思, 而 gradle 用的脚本语言, 可能需要一定的学习成本, 但是表现力更为强大. 这次由于要学习springcloud要使用多项目构建, 就来学习一下在这边面更优秀的 gradle. 命令 https://www.w3cschool.cn/gradle/9b5m1htc.html 生命周期 compile 用来编译项目源代码的依赖. runtime 在运行时被生成的类使用的依赖. 默认的, 也包含了编译时的依赖. testCompile 编译测试代码的依赖. 默认的, 包含生成的类运行所需的依赖和编译源代码的依赖. testRuntime 运行测试所需要的依赖. 默认的, 包含上面三个依赖.]]></content>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud学习笔记]]></title>
    <url>%2F2018-09-27-springcloud-note%2F</url>
    <content type="text"><![CDATA[这段时间在学springcloud, 这里开一篇用来记录学习的过程中遇到的问题以及心得体会, 方便以后自己查阅, 是一片笔记式的文章.]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用hexo搭建个人静态博客]]></title>
    <url>%2F2018-09-16-User_Pages_by_Hexo%2F</url>
    <content type="text"><![CDATA[之前一直想搭一个个人博客, 由于各种原因搁置了. 这次无意中看到github pages的妙用, 趁着热情还没散去赶紧动手搭建了一个, 作为一个后端菜鸡程序员, 折腾这么一个前端也是踩了不少坑. 包括安装部署以及一些个性化的配置, 这里记录一下, 作为Hello World. 安装环境 说到安装环境就要在这里啰嗦下, 开始是用的github推荐的jekyll, 还要安装ruby, 找到next主题的过程中了解到了hexo, 果断换了, 这个不会还可以找个队友问下. 就是这么一个过程就导致了我误解了这个流程. 由于github上next的文档有点歧义, 导致我直接下载主题之后在主题的根目录下运行hexo server.由于第一次接触node, 这里就直接怀疑人生了, 由于文是框架快完工的时候写的, 所以有些坑可能就忘了. 安装node. 在命令行执行npm install -g hexo-cli 安装Hexo 执行hexo init 初始化项目 在项目根目录执行npm install 安装项目依赖 到这里环境算是搭建好了, 可以执行hexo s -g 然后去浏览器访问localhost:4000查看效果. 具体的可以查看Hexo官网 更换主题, 你可以把主题下载到你项目的themes目录下面, 然后修改项目根目录下面的配置文件_config.yml中的theme字段为 你下载下来的主题文件夹名, 注意theme后面必须要有空格. 我装的是Next hexo 部署到github 和coding 博客我原本是放在github上, 但是由于访问速度比较慢, 还有百度并不能收录到github 的内容, 然后就把coding 作为国内访问, 毕竟配置好了之后更新文章和只放github没区别. 配置ssh公钥 这步是必须的, 填的邮箱最好是github和coding公用的邮箱, 一个公钥就能在几个地方使用 执行以下命令(邮箱换成你自己的), 期间按三次回车, 密码不用设置, 不然每次都要输入密码 1ssh-keygen -t rsa -C "blueboxh@163.com" 用以下命令检查是否生成成功( windows 用 powershell) 1cat ~/.ssh/id_rsa.pub 把上一步输出的公钥加入github和coding上的ssh key 中(从设置进入) 在终端输入以下命令, 添加主机到本机ssh 可信列表, 你也可以直接执行一个git 操作, 手动建立信任 12ssh -T git@github.comssh -T git@coding.net hexo 部署到gibhub, master分支存博客, source分支存源码 利用分支同时保留博客静态文件和源代码, 由于我会在公司和家里写博客, 所以方便在不同电脑之间同步就很重要了. 可以把代码放在source分支, 这样没有写完的文章等可以直接传上去, 静态博客自动部署在master分支, 这样就两不耽误. 需要注意的是, 不要手动修改master分支的内容, 否则下次部署又重新覆盖掉了. 新建一个 gubhub仓库, 项目名 一定要叫UserName.github.io 其中UserName为你的github用户名. 敲重点: 开始我开到别人说我也不信, 页面也能访问到也就没在意, 一抓包发现发现怎么也加载不出css等文件, 域名也是UserName.github.io, 应该是域名和仓库名需要对应. 这种格式的仓库为User Pages, 和普通仓库还有一个不同的地方就是这种仓库的pages只能放在master分支, 普通仓库的pages可以一般可以放在gh-pages分支. 这样就导致了一个很烦人的问题, 进入仓库的时候主分支没有readme, 他会很显眼的提示你加上, 你加上之后又会给你渲染成很丑的样子, 要么就是每次生成都要重新手动加入public文件夹里面, 这是要逼死强迫症啊. 还好解决了~~ 安装git 在项目根目录执行git init初始化本地git仓库 编辑.gitignore文件, 避免把一些依赖和代码自动生成的文件传到github上, 我的文件如下 1234567891011.DS_StoreThumbs.dbdb.jsonpackage-lock.json*.lognode_modules/public/.deploy*/.git/.idea/ 到项目根目录分别执行以下命令: (git不熟可以看看git教程) 123456# 创建并切换分支git checkout -b sourcegit add .git commit -m &quot;first commit&quot;git remote add origin git@github.com:blueboxH/blueboxh.github.io.gitgit push -u origin source 把其中的blueboxH换成你的用户名, 到这里你就把源码推送到了服务器的source分支, master分支不用手动推送, 最后要是推送不上去按照提示操作强制推送分支就好了. 不能推送的话检查ssh公钥配置是否有误 在项目根目录_config.yml中deploy字段配置如下: 1234deploy: type: git repo: git@github.com:blueboxH/blueboxh.github.io.git branch: master 执行hexo g -d 将自动生成后的文件自动部署到master分支. 去你的仓库设置检查github pages配置. 按以上步骤操作的话应该会自动设置好. 可以点击上面显示的链接访问你的站点了. hexo 部署到coding 由于源代码已经在github仓库了, 所以没必要再放到coding, 直接部署静态博客到coding上就好了. 注册coding账号, 升级成为银牌会员. 创建名为username的仓库, 仓库名字和用户名相同. (不同怎么样我也没试过~~) 仓库需要设置为公开源代码(新版). 配置项目根目录下_config.yml文件, 如下: (我的用户名为blueboxH, 这个根据个人情况修改) 123456deploy: type: git repo: github: git@github.com:blueboxH/blueboxh.github.io.git coding: git@git.coding.net:blueboxH/blueboxH.git branch: master 执行hexo g -d 将自动生成后的文件自动部署到github和coding的master分支. 要是这里部署不成功的话(master分支没有文件), 请检查ssh公钥配置. 在 代码 &gt; pages服务中点击设置一键开启静态pages 绑定域名 之所以把绑定域名单独提出来, 是因为这里有坑. 还有妙用, 如果你只是把项目放在一个仓库里, 那绑定域名只是一个可有可无的操作, 但是当你把博客同时部署在github和coding上的时候, 这能给你带来很多方便. 比如, 百度和谷歌收录不用再根据域名单独配置了, 同一个域名就可以访问部署在两个地方的博客. 域名解析可以把同一个域名根据访问ip不同分别解析到github或coding上, 只需要把解析到github的线路设置为海外即可, 你也可以把www前缀的域名解析到coding上(github不可以解析多个域名), 毕竟还是有一些人错误的认为域名必须要加www, 虽然猿类犯这种错的几率不大~~ 参考链接 这个很简单, 就如上文所操作, 只不过有两个地方需要注意, 一个就是公钥不需要两个, 邮箱相同, 同一个公钥可以在两个仓库设置. 去掉coding广告的时候需要回到旧版才能看到Hosted by Coding Pages选项 hexo有层次的分类(TOC)hexo SEO 你的博客部署上去了, 但是此时你并不能通过google或者百度搜索到你的博客, 因为你没有去他们那里登记~~. 你首先得向他们证明这个博客是你的, 这个时候就能体会到分别部署在两个地方的时候用属于自己的独立域名的好处了, 你可以用域名解析的方式方便的证明这个网站是你的, 不然两个部署在两个地方用两个不同的域名, 操作起来很麻烦. 然后你再分别提交站点地图. 这里我就没什么好说的了, 并没有什么独特的见解, 网上教程大把. 不过还是期待以后有时间能丰富这个模块. 所以单独留出来占个坑 安装sitemap站点地图自动生成插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在项目根目录_config.yml下作如下配置: 1234sitemap: path: resources/sitemap.xmlbaidusitemap: path: resources/baidusitemap.xml 之所以不配置在主题目录是因为配置在这换主题的话不用改, 且这个和主题无关 在项目根目录_config.yml下修改域名: 1234# URL## 如果你的站点用的子目录(比子域名更有利于SEO), 设置 url 为 'https://bluebox.org.cn/blog' ,设置 root 为 '/blog/'url: https://bluebox.org.cnroot: / 执行hexo g生成静态文件, 你会发现 public/resource下面多了两个文件sitemap.xml和baidusitemap.xml` 添加robot协议, 在source\resources下面新建robot.txt文件, 内容如下: 1234567891011121314# hexo robots.txtUser-agent: *Allow: /Allow: /archives/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://bluebox.org.cn/resources/sitemap.xmlSitemap: https://bluebox.org.cn/resources/baidusitemap.xml 给非友情链接的出站链接添加 “nofollow” 标签 (todo) 验证站点 (todo) 提交sitemap (todo) hexo填坑hexo不渲染README文件的方法 在项目根目录下_config.yml文件中配置如下配置: 1skip_render: README.md todo 怎么默认 source 分支 readme 代码复制粘贴插件 1, 2级标题居中显示 评论收到邮件提醒的时候并不能跳转到指定文章指定评论 加载较慢, 需要优化 logo 不能展示出来 hexo-autonofollow zen test]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>User Pages</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018-09-13-Hello%20World%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>标签测试1</tag>
        <tag>标签测试2</tag>
      </tags>
  </entry>
</search>
